package gcrypto

import (
	"testing"
)

// TestSuite for GenerateKey function
func TestGenerateKey(t *testing.T) {
	tests := []struct {
		name string
		args string
		want int
	}{
		// Testing edge cases
		{"Empty string", "", 32},
		{"32 chars string", "abcdefghabcdefghabcdefghabcdefgh", 32},
		{"33 chars string", "abcdefghabcdefghabcdefghabcdefgha", 32},
		{"31 chars string", "abcdefghabcdefghabcdefghabcdefg", 32},
		{"32 spaces string", "                                ", 32},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := len(GenerateKey(tt.args)); got != tt.want {
				t.Errorf("GenerateKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

// TestSuite for Encrypt and Decrypt functions
func TestAesEncryptDecryptCFB(t *testing.T) {
	tests := []struct {
		name    string
		text    string
		key     string
		wantErr bool
	}{
		// Testing normal functionality
		{"Hello World", "Hello, world!", GenerateKey("secure"), false},

		// Testing edge cases
		{"Empty string", "", GenerateKey("secure"), false},
		// "Long key" directly uses a long string instead of a valid key generated by GenerateKey()
		{"Long key", "This is a very long string that is over 32 characters long", "This is a very long string that is over 32 characters long", true},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			encrypted, err := AesEncryptCFB(tt.text, tt.key)

			// Check if error was expected
			if (err != nil) != tt.wantErr {
				t.Errorf("AesEncryptCFB() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			// If an error wasn't expected, try to decrypt
			if !tt.wantErr {
				decrypted, err := AesDecryptCFB(encrypted, tt.key)

				// Check if decryption produced an error
				if (err != nil) != tt.wantErr {
					t.Errorf("AesDecryptCFB() error = %v, wantErr %v", err, tt.wantErr)
				}

				// Check if the decrypted text matched the original text
				if decrypted != tt.text {
					t.Errorf("Decrypted text doesn't match original: expected %q, got %q", tt.text, decrypted)
				}
			}
		})
	}
}
